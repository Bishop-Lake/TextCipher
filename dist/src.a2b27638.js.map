{"version":3,"sources":["node_modules/dom-to-image/src/dom-to-image.js","src/index.js"],"names":["characterPallete","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","drawCharacter","letter","character","document","createElement","classList","add","cellOne","cellTwo","cellThree","cellFour","cellFive","cellSix","charKey","appendChild","querySelector","checked","style","background","textContent","addEventListener","renderTranslation","display","innerHTML","stringToTranslate","value","toLowerCase","trim","split","forEach","char","preImg","domtoimage","toPng","then","dataUrl","img","Image","src"],"mappings":"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":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["(function (global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof module !== 'undefined')\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n                defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n            .then(function (node) {\n                return cloneNode(node, options.filter, true);\n            })\n            .then(embedFonts)\n            .then(inlineImages)\n            .then(applyOptions)\n            .then(function (clone) {\n                return makeSvgDataUri(clone,\n                    options.width || util.width(node),\n                    options.height || util.height(node)\n                );\n            });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function (property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.getContext('2d').getImageData(\n                    0,\n                    0,\n                    util.width(node),\n                    util.height(node)\n                ).data;\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.toDataURL();\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n            .then(function (canvas) {\n                return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n            .then(util.canvasToBlob);\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if(typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if(typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n            .then(util.makeImage)\n            .then(util.delay(100))\n            .then(function (image) {\n                var canvas = newCanvas(domNode);\n                canvas.getContext('2d').drawImage(image, 0, 0);\n                return canvas;\n            });\n\n        function newCanvas(domNode) {\n            var canvas = document.createElement('canvas');\n            canvas.width = options.width || util.width(domNode);\n            canvas.height = options.height || util.height(domNode);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n            .then(makeNodeCopy)\n            .then(function (clone) {\n                return cloneChildren(node, clone, filter);\n            })\n            .then(function (clone) {\n                return processClone(node, clone);\n            });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function (child) {\n                    done = done\n                        .then(function () {\n                            return cloneNode(child, filter);\n                        })\n                        .then(function (childClone) {\n                            if (childClone) parent.appendChild(childClone);\n                        });\n                });\n                return done;\n            }\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n                .then(cloneStyle)\n                .then(clonePseudoElements)\n                .then(copyUserInput)\n                .then(fixSvg)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                function copyStyle(source, target) {\n                    if (source.cssText) target.cssText = source.cssText;\n                    else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function (name) {\n                            target.setProperty(\n                                name,\n                                source.getPropertyValue(name),\n                                source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function (element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    clone.className = clone.className + ' ' + className;\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                                .map(formatProperty)\n                                .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                    style.getPropertyValue(name) +\n                                    (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function (attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n            .then(function (cssText) {\n                var styleNode = document.createElement('style');\n                node.appendChild(styleNode);\n                styleNode.appendChild(document.createTextNode(cssText));\n                return node;\n            });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n            .then(function () {\n                return node;\n            });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n            .then(function (node) {\n                node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n                return new XMLSerializer().serializeToString(node);\n            })\n            .then(util.escapeXhtml)\n            .then(function (xhtml) {\n                return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n            })\n            .then(function (foreignObject) {\n                return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n                    foreignObject + '</svg>';\n            })\n            .then(function (svg) {\n                return 'data:image/svg+xml;charset=utf-8,' + svg;\n            });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function (resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function (resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function () {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if(domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function (resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if(domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if(split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if(placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function () {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if(placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function delay(ms) {\n            return function (arg) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function (url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n                .then(function (url) {\n                    return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n                })\n                .then(get || util.getAndEncode)\n                .then(function (data) {\n                    return util.dataAsUrl(data, util.mimeType(url));\n                })\n                .then(function (dataUrl) {\n                    return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n                });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n                .then(readUrls)\n                .then(function (urls) {\n                    var done = Promise.resolve(string);\n                    urls.forEach(function (url) {\n                        done = done.then(function (string) {\n                            return inline(string, url, baseUrl, get);\n                        });\n                    });\n                    return done;\n                });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n                .then(function (webFonts) {\n                    return Promise.all(\n                        webFonts.map(function (webFont) {\n                            return webFont.resolve();\n                        })\n                    );\n                })\n                .then(function (cssStrings) {\n                    return cssStrings.join('\\n');\n                });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n                .then(getCssRules)\n                .then(selectWebFontRules)\n                .then(function (rules) {\n                    return rules.map(newWebFont);\n                });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                    .filter(function (rule) {\n                        return rule.type === CSSRule.FONT_FACE_RULE;\n                    })\n                    .filter(function (rule) {\n                        return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                    });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function (sheet) {\n                    try {\n                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                    } catch (e) {\n                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function () {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                    .then(get || util.getAndEncode)\n                    .then(function (data) {\n                        return util.dataAsUrl(data, util.mimeType(element.src));\n                    })\n                    .then(function (dataUrl) {\n                        return new Promise(function (resolve, reject) {\n                            element.onload = resolve;\n                            element.onerror = reject;\n                            element.src = dataUrl;\n                        });\n                    });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n                .then(function () {\n                    if (node instanceof HTMLImageElement)\n                        return newImage(node).inline();\n                    else\n                        return Promise.all(\n                            util.asArray(node.childNodes).map(function (child) {\n                                return inlineAll(child);\n                            })\n                        );\n                });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                    .then(function (inlined) {\n                        node.style.setProperty(\n                            'background',\n                            inlined,\n                            node.style.getPropertyPriority('background')\n                        );\n                    })\n                    .then(function () {\n                        return node;\n                    });\n            }\n        }\n    }\n})(this);\n","import domtoimage from \"dom-to-image\";\r\n\r\nconst characterPallete = {\r\n  a: [\"magenta\", \"red\", \"lime\", \"yellow\", \"blue\", \"cyan\"],\r\n\r\n  b: [\"red\", \"magenta\", \"lime\", \"yellow\", \"blue\", \"cyan\"],\r\n\r\n  c: [\"red\", \"lime\", \"magenta\", \"yellow\", \"blue\", \"cyan\"],\r\n\r\n  d: [\"red\", \"lime\", \"yellow\", \"magenta\", \"blue\", \"cyan\"],\r\n\r\n  e: [\"red\", \"lime\", \"yellow\", \"blue\", \"magenta\", \"cyan\"],\r\n\r\n  f: [\"red\", \"lime\", \"yellow\", \"blue\", \"cyan\", \"magenta\"],\r\n\r\n  g: [\"lime\", \"red\", \"yellow\", \"blue\", \"cyan\", \"magenta\"],\r\n\r\n  h: [\"lime\", \"yellow\", \"red\", \"blue\", \"cyan\", \"magenta\"],\r\n\r\n  i: [\"lime\", \"yellow\", \"blue\", \"red\", \"cyan\", \"magenta\"],\r\n\r\n  j: [\"lime\", \"yellow\", \"blue\", \"cyan\", \"red\", \"magenta\"],\r\n\r\n  k: [\"lime\", \"yellow\", \"blue\", \"cyan\", \"magenta\", \"red\"],\r\n\r\n  l: [\"yellow\", \"lime\", \"blue\", \"cyan\", \"magenta\", \"red\"],\r\n\r\n  m: [\"yellow\", \"blue\", \"lime\", \"cyan\", \"magenta\", \"red\"],\r\n\r\n  n: [\"yellow\", \"blue\", \"cyan\", \"lime\", \"magenta\", \"red\"],\r\n\r\n  o: [\"yellow\", \"blue\", \"cyan\", \"magenta\", \"lime\", \"red\"],\r\n\r\n  p: [\"yellow\", \"blue\", \"cyan\", \"magenta\", \"red\", \"lime\"],\r\n\r\n  q: [\"blue\", \"yellow\", \"cyan\", \"magenta\", \"red\", \"lime\"],\r\n\r\n  r: [\"blue\", \"cyan\", \"yellow\", \"magenta\", \"red\", \"lime\"],\r\n\r\n  s: [\"blue\", \"cyan\", \"magenta\", \"yellow\", \"red\", \"lime\"],\r\n\r\n  t: [\"blue\", \"cyan\", \"magenta\", \"red\", \"yellow\", \"lime\"],\r\n\r\n  u: [\"blue\", \"cyan\", \"magenta\", \"red\", \"lime\", \"yellow\"],\r\n\r\n  v: [\"cyan\", \"blue\", \"magenta\", \"red\", \"lime\", \"yellow\"],\r\n\r\n  w: [\"cyan\", \"magenta\", \"blue\", \"red\", \"lime\", \"yellow\"],\r\n\r\n  x: [\"cyan\", \"magenta\", \"red\", \"blue\", \"lime\", \"yellow\"],\r\n\r\n  y: [\"cyan\", \"magenta\", \"red\", \"lime\", \"blue\", \"yellow\"],\r\n\r\n  z: [\"cyan\", \"magenta\", \"red\", \"green\", \"yellow\", \"blue\"],\r\n\r\n  \"0\": [\"black\", \"grey\", \"white\", \"black\", \"grey\", \"white\"],\r\n\r\n  \"1\": [\"grey\", \"black\", \"white\", \"black\", \"grey\", \"white\"],\r\n\r\n  \"2\": [\"grey\", \"white\", \"black\", \"black\", \"grey\", \"white\"],\r\n\r\n  \"3\": [\"grey\", \"white\", \"black\", \"grey\", \"black\", \"white\"],\r\n\r\n  \"4\": [\"grey\", \"white\", \"black\", \"grey\", \"white\", \"black\"],\r\n\r\n  \"5\": [\"white\", \"grey\", \"black\", \"grey\", \"white\", \"black\"],\r\n\r\n  \"6\": [\"white\", \"black\", \"grey\", \"grey\", \"white\", \"black\"],\r\n\r\n  \"7\": [\"white\", \"black\", \"grey\", \"white\", \"grey\", \"black\"],\r\n\r\n  \"8\": [\"white\", \"black\", \"grey\", \"white\", \"black\", \"grey\"],\r\n\r\n  \"9\": [\"black\", \"white\", \"grey\", \"white\", \"black\", \"grey\"],\r\n\r\n  \".\": [\"black\", \"white\", \"white\", \"black\", \"black\", \"white\"],\r\n\r\n  \",\": [\"white\", \"black\", \"black\", \"white\", \"white\", \"black\"],\r\n\r\n  \" \": [\"black\", \"black\", \"black\", \"black\", \"black\", \"black\"],\r\n\r\n  \"?\": [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\"]\r\n};\r\n\r\nfunction drawCharacter(letter) {\r\n  const character = document.createElement(\"div\");\r\n  character.classList.add(\"character\");\r\n\r\n  const cellOne = document.createElement(\"div\");\r\n  const cellTwo = document.createElement(\"div\");\r\n  const cellThree = document.createElement(\"div\");\r\n  const cellFour = document.createElement(\"div\");\r\n  const cellFive = document.createElement(\"div\");\r\n  const cellSix = document.createElement(\"div\");\r\n  const charKey = document.createElement(\"p\");\r\n\r\n  character.appendChild(cellOne);\r\n  character.appendChild(cellTwo);\r\n  character.appendChild(cellThree);\r\n  character.appendChild(cellFour);\r\n  character.appendChild(cellFive);\r\n  character.appendChild(cellSix);\r\n  if (document.querySelector(\".key-check\").checked === true) {\r\n    character.appendChild(charKey);\r\n  }\r\n\r\n  cellOne.classList.add(\"pixel\");\r\n  cellTwo.classList.add(\"pixel\");\r\n  cellThree.classList.add(\"pixel\");\r\n  cellFour.classList.add(\"pixel\");\r\n  cellFive.classList.add(\"pixel\");\r\n  cellSix.classList.add(\"pixel\");\r\n  charKey.classList.add(\"key\");\r\n\r\n  cellOne.style.background = characterPallete[letter][0];\r\n  cellTwo.style.background = characterPallete[letter][1];\r\n  cellThree.style.background = characterPallete[letter][2];\r\n  cellFour.style.background = characterPallete[letter][3];\r\n  cellFive.style.background = characterPallete[letter][4];\r\n  cellSix.style.background = characterPallete[letter][5];\r\n  charKey.textContent = letter;\r\n\r\n  return document.querySelector(\".character-container\").appendChild(character);\r\n}\r\n\r\ndocument\r\n  .querySelector(\".translate\")\r\n  .addEventListener(\"click\", renderTranslation);\r\n\r\nfunction renderTranslation() {\r\n  document.querySelector(\".new-image-wrapper\").style.display = \"none\";\r\n  document.querySelector(\".new-image\").innerHTML = \"\";\r\n  document.querySelector(\".character-container\").innerHTML = \"\";\r\n  const stringToTranslate = document\r\n    .querySelector(\".text-to-translate\")\r\n    .value.toLowerCase()\r\n    .trim(\"  \")\r\n    .split(\"\");\r\n  stringToTranslate.forEach(char => drawCharacter(char));\r\n  document.querySelector(\".text-to-translate\").value = \"\";\r\n}\r\n\r\n//create image from generated translation\r\ndocument.querySelector(\".create-image\").addEventListener(\"click\", () => {\r\n  let preImg = document.querySelector(\".character-container\");\r\n  document.querySelector(\".new-image\").innerHTML = \"\";\r\n  domtoimage.toPng(preImg).then(function(dataUrl) {\r\n    let img = new Image();\r\n    img.src = dataUrl;\r\n    document.querySelector(\".new-image-wrapper\").style.display = \"block\";\r\n    document.querySelector(\".new-image\").appendChild(img);\r\n  });\r\n});\r\n"]}